/*
* Media Query Mixin
*/
@mixin mq($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  }
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}


/*
* Normalize Font Settings
*/
@mixin font-normal {
  font-weight: normal;
  font-style: normal;
}


/*
* Absolute Positioning
*/
@mixin abs-pos ($top: auto, $right: auto, $bottom: auto, $left: auto) {
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  position: absolute;
}

/*
* Absolute Positioning
*/
@mixin fixed-pos ($top: auto, $right: auto, $bottom: auto, $left: auto) {
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  position: fixed;
}



/*
* PX/REM Mixin
*/
@mixin rem($property, $values) {
  $px : (); /* 3 */
  $rem: (); /* 3 */

  @each $value in $values { /* 4 */

    @if $value == 0 or $value == auto { /* 5 */
      $px : append($px , $value);
      $rem: append($rem, $value);
    }

    @else {
      $unit: unit($value); /* 6 */
      $val: parseInt($value); /* 6 */

      @if $unit == "px" { /* 7 */
        $px : append($px, $value);
        $rem: append($rem, ($val / 10 + rem));
      }

      @if $unit == "rem" { /* 7 */
        $px : append($px, ($val * 16 + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem { /* 8 */
    #{$property}: $px; /* 9 */
  } @else {
    #{$property}: $px; /* 9 */
    #{$property}: $rem; /* 9 */
  }
}


/**
* Image Replacement
*/
@mixin image-replace($image: null, $display: null, $reset-border-background: true) {
  font: 0/0 a;
  text-shadow: none;
  color: transparent;
  // reset the border and background-color
  // see http://css-tricks.com/examples/ImageReplacement/ -> 2012 H5BP Image Replacement
  @if $reset-border-background == true {
    border: 0;
    background-color: transparent;
  }
  @if $image != null {
    @include image-and-dimensions($image, $display);
  } @else if $display != null {
    display: $display;
  }
}

/**
* Retina Images
*/
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}

/**
* Placeholders
*/
@mixin placeholder {
  $placeholders: ":-webkit-input" ":-moz" "-moz" "-ms-input";
  @each $placeholder in $placeholders {
    &:#{$placeholder}-placeholder {
      @content;
    }
  }
}

/**
* Font Features
*/
@mixin font-feature-settings($settings...) {
  @if length($settings) == 0 { $settings: none; }
}


/**
* Ellipsis
*/
@mixin ellipsis($width: 100%) {
  display: inline-block;
  max-width: $width;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
}


/**
* Word-Wrap
*/
@mixin word-wrap($wrap: break-word) {
  word-wrap: $wrap;
  @if $wrap == break-word {
    overflow-wrap: break-word;
    word-break: break-all;
  }
}


/**
* Border Radius
*/
@mixin border-top-radius($radii) {
  border-top-left-radius: $radii;
  border-top-right-radius: $radii;
}
@mixin border-right-radius($radii) {
  border-bottom-right-radius: $radii;
  border-top-right-radius: $radii;
}
@mixin border-bottom-radius($radii) {
  border-bottom-left-radius: $radii;
  border-bottom-right-radius: $radii;
}
@mixin border-left-radius($radii) {
  border-bottom-left-radius: $radii;
  border-top-left-radius: $radii;
}


/*
* Keyframe Animations
* http://css-tricks.com/snippets/css/keyframe-animation-syntax/
*/
@mixin animate($name, $duration, $timing) {
  animation: $name $duration $timing forwards;
}


/*
* Transitions
*/
@mixin transition($prop) {
  transition: $prop $base-animation-timing $ease-in-quad;
}
